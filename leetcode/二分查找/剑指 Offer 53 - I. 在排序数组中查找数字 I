剑指 Offer 53 - I. 在排序数组中查找数字 I
难度：简单

统计一个数字在排序数组中出现的次数。

示例 1:
输入: nums = [5,7,7,8,8,10], target = 8
输出: 2

解法：
方法一：二分
使用两次二分，找到数字出现的第一个位置和最后一个位置
时间复杂度 O(log(n))
空间复杂度 O(1)

方法二：遍历
时间复杂度 O(n)
空间复杂度 O(1)

code:
方法一：
class Solution {
public:
    int search(vector<int>& nums, int target) {
        if(nums.size() == 0){
            return 0;
        }
        int first, last;
        // 查找第一个出现的位置
        int l=0, r=nums.size()-1;
        while(l < r){
            int mid = l + (r-l)/2;
            if(nums[mid] >= target){
                r = mid;
            }else{
                l = mid+1;
            }
        }
        if(nums[r] != target){ // 如果没有，则返回0
            return 0;
        }
        first = r;
        // 查找最后出现的位置
        l=0, r=nums.size()-1;
        while(l < r){
            int mid = l + (r-l+1)/2;
            if(nums[mid] <= target){
                l = mid;
            }else{
                r = mid-1;
            }
        }
        last = l;
        return last-first+1;
    }
};
