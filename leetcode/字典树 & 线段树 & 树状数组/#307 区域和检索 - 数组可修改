#307. 区域和检索 - 数组可修改
难度：中等

给定一个整数数组  nums，求出数组从索引 i 到 j  (i ≤ j) 范围内元素的总和，包含 i,  j 两点。
update(i, val) 函数可以通过将下标为 i 的数值更新为 val，从而对数列进行修改。

示例:
Given nums = [1, 3, 5]
sumRange(0, 2) -> 9
update(1, 2)
sumRange(0, 2) -> 8

解法：
方法一：线段树
更新时间复杂度 O(log(n))
查询时间复杂度 O(log(n))

code：
方法一：
#define lson l, m, rt<<1
#define rson m+1, r, rt<<1|1

class NumArray {
public:
    vector<int> nums;
    vector<int> sum;
    
    NumArray(vector<int>& nums) {
        this->nums = nums;
        if(nums.size() != 0){
            sum.reserve(nums.size() << 2);
            mbuild(1, nums.size(), 1);
        }
    }
    
    void update(int i, int val) {
        mupdate(i+1, val, 1, nums.size(), 1);
    }
    
    int sumRange(int i, int j) {
        return mquery(i+1, j+1, 1, nums.size(), 1);
    }
    
    // 更新父节点
    void mpushUp(int rt){
        sum[rt] = sum[rt<<1] + sum[rt<<1|1];
    }
    // 构建线段树
    void mbuild(int l, int r, int rt){
        if(l == r){
            sum[rt] = nums[l-1];
            return ;
        }
        int m = (l+r)>>1;
        mbuild(lson);
        mbuild(rson);
        mpushUp(rt);
    }
    // 更新
    void mupdate(int p, int val, int l, int r,int rt){
        if(l == r){
            sum[rt] = val;
            return ;
        }
        int m = (l+r)>>1;
        if(p <= m){
            mupdate(p, val, lson);
        }else{
            mupdate(p, val, rson);
        }
        mpushUp(rt);
    }
    // 区间查询
    int mquery(int L, int R, int l, int r, int rt){
        if(L <= l && R >= r){
            return sum[rt];
        }
        int m = (l+r)>>1;
        int res = 0;
        if(L <= m){
            res += mquery(L, R, lson);
        }
        if(R >= m+1){
            res += mquery(L, R, rson);
        }
        return res;
    }
};

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray* obj = new NumArray(nums);
 * obj->update(i,val);
 * int param_2 = obj->sumRange(i,j);
 */
 
