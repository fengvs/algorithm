#96. 不同的二叉搜索树
难度：中等

给定一个整数 n，求以 1 ... n 为节点组成的二叉搜索树有多少种？

示例:
输入: 3
输出: 5
解释:
给定 n = 3, 一共有 5 种不同结构的二叉搜索树:

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3

解法：
方法一：动态规划——区间
dp[i][j] = dp[i][p-1] * dp[p+1][j], i<=p<=j
解释：二叉搜索树，即中序遍历有序，[左子树，根，右子树]，选出根节点后，左子树个数 * 右子树个数
时间复杂度 O(n^3)
空间复杂度 O(n^2)

方法二：动态规划——简化版
假设 n 个节点存在的二叉搜索树个数是G(n), 令f(i)为以i为根的二叉搜索树的个数，则
G(n) = f(1) + f(2) + ... + f(n)
当 i 为根节点时，左子树节点个数为 i-1， 右子树个数为 n-i，则
f(i) = G(i-1) + G(n-i)
综合两个公式可以得到 卡特兰数 公式：
G(n) = G(0)*G(n-1) + G(1)*G(n-2) + ... + G(n-1)*G(0)
时间复杂度 O(n^2)
空间复杂度 O(n)

方法三：数学——卡特兰数
卡塔兰数更便于计算的定义如下:
C(0) = 1, 
C(n+1) = (2 * (2*n + 1) / (n+2)) * C(n)
时间复杂度 O(n)
空间复杂度 O(1)

code：
方法一：
class Solution {
public:
    // 区间动态规划
    // dp[i][j] = dp[i][p-1] * dp[p+1][j], i<=p<=j
    int numTrees(int n) {
        if(n == 0){
            return 0;
        }
        int dp[n+2][n+2];
        memset(dp, 0, sizeof(dp));
        for(int i=1; i<=n; i++){
            dp[i][i] = dp[i+1][i] = dp[i][i-1] = 1;
        }
        for(int k=2; k<=n; k++){
            for(int i=1; i<=n-k+1; i++){
                int j = i+k-1;
                for(int p=i; p<=j; p++){
                    dp[i][j] += dp[i][p-1] * dp[p+1][j];
                }
            }
        }
        return dp[1][n];
    }
};
执行用时：0 ms, 在所有 C++ 提交中击败了100.00%的用户
内存消耗：5.8 MB, 在所有 C++ 提交中击败了98.49%的用户

方法二：
class Solution {
public:
    int numTrees(int n) {
        vector<int> G(n + 1, 0);
        G[0] = 1;
        G[1] = 1;

        for (int i = 2; i <= n; ++i) {
            for (int j = 1; j <= i; ++j) {
                G[i] += G[j - 1] * G[i - j];
            }
        }
        return G[n];
    }
};

方法三：
class Solution {
public:
    int numTrees(int n) {
        long long C = 1;
        for (int i = 0; i < n; ++i) {
            C = C * 2 * (2 * i + 1) / (i + 2);
        }
        return (int)C;
    }
};
