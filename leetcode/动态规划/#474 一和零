#474. 一和零
难度：中等

在计算机界中，我们总是追求用有限的资源获取最大的收益。
现在，假设你分别支配着 m 个 0 和 n 个 1。另外，还有一个仅包含 0 和 1 字符串的数组。
你的任务是使用给定的 m 个 0 和 n 个 1 ，找到能拼出存在于数组中的字符串的最大数量。每个 0 和 1 至多被使用一次。
示例 1:
输入: strs = ["10", "0001", "111001", "1", "0"], m = 5, n = 3
输出: 4
解释: 总共 4 个字符串可以通过 5 个 0 和 3 个 1 拼出，即 "10","0001","1","0" 。

解法：
方法一：动态规划（类似背包问题）
dp[i][j] = max(dp[i][j], dp[i-x][j-y]+1)
类似于背包，实现时采用倒序计算，可节省一个维度的空间开销（若每种物品可重复取，则正序计算）
时间复杂度 O(L*m*n)
空间复杂度 O(m*n)

code：
方法一：
class Solution {
public:
    // 动态规划：dp[i][j] = max(dp[i][j], dp[i-x][j-y]+1);
    int dp[105][105];
    int findMaxForm(vector<string>& strs, int m, int n) {
        memset(dp, 0, sizeof(dp));
        for(int k=0; k<strs.size(); k++){
            for(int i=m; i>=0; i--){  // 注意可以等0
                for(int j=n; j>=0; j--){ // 只用一次，倒序
                    int x_m=0, x_n=0;
                    for(int p=0; p<strs[k].size(); p++){
                        if(strs[k][p] == '0'){
                            x_m++;
                        }else{
                            x_n++;
                        }
                    }
                    if(i-x_m>=0 && j-x_n>=0){
                        dp[i][j] = max(dp[i][j], dp[i-x_m][j-x_n]+1);
                    }
                }
            }
        }
        return dp[m][n];
    }
};
