#978. 最长湍流子数组
难度：中等

当 A 的子数组 A[i], A[i+1], ..., A[j] 满足下列条件时，我们称其为湍流子数组：
若 i <= k < j，当 k 为奇数时， A[k] > A[k+1]，且当 k 为偶数时，A[k] < A[k+1]；
或 若 i <= k < j，当 k 为偶数时，A[k] > A[k+1] ，且当 k 为奇数时， A[k] < A[k+1]。
也就是说，如果比较符号在子数组中的每个相邻元素对之间翻转，则该子数组是湍流子数组。
返回 A 的最大湍流子数组的长度。

示例 1：
输入：[9,4,2,10,7,8,8,1,9]
输出：5
解释：(A[1] > A[2] < A[3] > A[4] < A[5])

解法：
方法一：动态规划
dp[n][2]
dp[i][0]:第i个元素结尾 且最后是<号 的最大长度
dp[i][1]:第i个元素结尾 且最后是>号 的最大长度
时间复杂度 O(n)
空间复杂度 O(n) （可优化至 O(1)，因为当前位置的计算只与前一个位置的符号有关，用一个变量存前一个符号即可）

方法二：滑动窗口
时间复杂度：O(N)
空间复杂度：O(1)

code：
方法一：
class Solution {
public:
    int dp[40005][2]; // 2:代表两种状态,以i结尾分别为》、《的最大长度
    int maxTurbulenceSize(vector<int>& A) {
        if(A.size() == 0){
            return 0;
        }
        int n = A.size();
        memset(dp, 0, sizeof(dp));
        dp[0][0] = dp[0][1] = 1;
        int ans = 1;
        for(int i=1; i<n; i++){
            if(A[i] > A[i-1]){ // 三种情况
                dp[i][1] = dp[i-1][0]+1;
                dp[i][0] = 1;
            }else if(A[i] < A[i-1]){
                dp[i][0] = dp[i-1][1]+1;
                dp[i][1] = 1;
            }else{
                dp[i][0] = dp[i][1] = 1;
            }
            ans = max(ans, max(dp[i][0], dp[i][1]));
        }
        return ans;
    }
};
方法二：
class Solution {
    public int maxTurbulenceSize(int[] A) {
        int N = A.length;
        int ans = 1;
        int anchor = 0;

        for (int i = 1; i < N; ++i) {
            int c = Integer.compare(A[i-1], A[i]);
            if (i == N-1 || c * Integer.compare(A[i], A[i+1]) != -1) {
                if (c != 0) ans = Math.max(ans, i - anchor + 1);
                anchor = i;
            }
        }

        return ans;
    }
}

