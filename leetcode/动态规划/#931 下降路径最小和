931. 下降路径最小和
难度：中等

给定一个方形整数数组 A，我们想要得到通过 A 的下降路径的最小和。
下降路径可以从第一行中的任何元素开始，并从每一行中选择一个元素。在下一行选择的元素和当前行所选元素最多相隔一列。

示例：
输入：[[1,2,3],[4,5,6],[7,8,9]]
输出：12
解释：
可能的下降路径有：
[1,4,7], [1,4,8], [1,5,7], [1,5,8], [1,5,9]
[2,4,7], [2,4,8], [2,5,7], [2,5,8], [2,5,9], [2,6,8], [2,6,9]
[3,5,7], [3,5,8], [3,5,9], [3,6,8], [3,6,9]
和最小的下降路径是 [1,4,7]，所以答案是 12。

解法：
方法一：动态规划
dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1]) + A[i][j]
时间复杂度 O(n * n)
空间复杂度 O(n * n)
优化空间复杂度：
1. 滚动数组：O(n)
2. 原数组修改：O(1)

code:
方法一：
class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& A) {
        int n = A.size();
        if(n <= 0){
            return 0;
        }
        int dp[n][n];
        // 初始化
        memset(dp, -1, sizeof(dp));
        for(int j=0; j<n; j++){
            dp[0][j] = A[0][j];
        }
        // 状态转移
        for(int i=1; i<n; i++){
            for(int j=0; j<n; j++){
                dp[i][j] = dp[i-1][j]+A[i][j];
                if(j-1 >= 0){
                    dp[i][j] = min(dp[i][j], dp[i-1][j-1]+A[i][j]);
                }
                if(j+1 < n){
                    dp[i][j] = min(dp[i][j], dp[i-1][j+1]+A[i][j]);
                }
            }
        }
        // 选出最优结果
        int ans = dp[n-1][0];
        for(int j=0; j<n; j++){
            ans = min(ans, dp[n-1][j]);
        }
        return ans;
    }
};
