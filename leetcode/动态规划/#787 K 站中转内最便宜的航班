#787. K 站中转内最便宜的航班
难度：中等

有 n 个城市通过 m 个航班连接。每个航班都从城市 u 开始，以价格 w 抵达 v。
现在给定所有的城市和航班，以及出发城市 src 和目的地 dst，你的任务是找到从 src 到 dst 最多经过 k 站中转的最便宜的价格。 如果没有这样的路线，则输出 -1。

示例 1：
输入: 
n = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]
src = 0, dst = 2, k = 1
输出: 200
解释: 
城市航班图如下

从城市 0 到城市 2 在 1 站中转以内的最便宜价格是 200，如图中红色所示。


解法：
方法一：动态规划

方法二：Dijkstra + 优先队列


code：
方法一：
class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int K) {
        int dp[n][K+2];
        for(int i=0; i<n; i++){
            for(int j=0; j<=K+1; j++){
                dp[i][j] = INT_MAX;
            }
        }
        for(int k=0; k<=K+1; k++){
            dp[src][k] = 0;
        }
        for(int k=1; k<=K+1; k++){
            for(int i=0; i<flights.size(); i++){
                if(dp[flights[i][0]][k-1] != INT_MAX){
                    dp[flights[i][1]][k] = min(dp[flights[i][1]][k], dp[flights[i][0]][k-1] + flights[i][2]);
                }
            }
        }
        return dp[dst][K+1]==INT_MAX ? -1 : dp[dst][K+1];
    }
};
