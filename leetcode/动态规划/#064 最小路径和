#64. 最小路径和
难度：中等

给定一个包含非负整数的 m x n 网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。
说明：每次只能向下或者向右移动一步。

示例:
输入:
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
输出: 7
解释: 因为路径 1→3→1→1→1 的总和最小。

解法：
方法一：动态规划
dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]
时间复杂度 O(n * m)
空间复杂度 O(n * m), 滚动数组可优化为 O(m)

code:
方法一:
class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        if(grid.size() == 0){
            return 0;
        }
        int n=grid.size(), m=grid[0].size();
        int dp[m]; // 滚动数组 优化空间
        memset(dp, 0, sizeof(dp));
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(i == 0){
                    dp[j] = grid[i][j] + (j>0 ? dp[j-1] : 0);
                }else{
                    dp[j] = grid[i][j] + (j>0 ? min(dp[j], dp[j-1]) : dp[j]);
                }
            }
        }
        return dp[m-1];
    }
};
