#113. 路径总和 II
难度：中等

给定一个二叉树和一个目标和，找到所有从根节点到叶子节点路径总和等于给定目标和的路径。
说明: 叶子节点是指没有子节点的节点。
示例:
给定如下二叉树，以及目标和 sum = 22，
              5
             / \
            4   8
           /   / \
          11  13  4
         /  \    / \
        7    2  5   1
返回:
[
   [5,4,11,2],
   [5,8,4,5]
]

解法：
方法一：dfs
时间复杂度 O(n) 每个节点遍历一次
空间复杂度 O(n)
官方的：
时间复杂度：O(N^2)，其中 N 是树的节点数。在最坏情况下，树的上半部分为链状，下半部分为完全二叉树，并且从根节点到每一个叶子节点的路径都符合题目要求。
此时，路径的数目为 O(N)，并且每一条路径的节点个数也为 O(N)，因此要将这些路径全部添加进答案中，时间复杂度为 O(N^2)。
空间复杂度：O(N)，其中 N 是树的节点数。空间复杂度主要取决于栈空间的开销，栈中的元素个数不会超过树的节点数。

方法二：bfs


注：题目没说val大于0，不要乱加条件！！！
code：
方法一：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> pathSum(TreeNode* root, int sum) {
        vector<vector<int>> ans;
        vector<int> path;
        if(root == NULL){
            return ans;
        }
        path.push_back(root->val);
        dfs(root, sum-root->val, ans, path);
        return ans;
    }
    void dfs(TreeNode* root, int sum, vector<vector<int>>& ans, vector<int>& path){
        if(root == NULL){
            return ;
        }
        if(root->left==NULL && root->right==NULL && sum==0){
            ans.push_back(path);
            return ;
        }
        if(root->left){
            path.push_back(root->left->val);
            dfs(root->left, sum-root->left->val, ans, path);
            path.pop_back();
        }
        if(root->right){
            path.push_back(root->right->val);
            dfs(root->right, sum-root->right->val, ans, path);
            path.pop_back();
        }
    }
};
