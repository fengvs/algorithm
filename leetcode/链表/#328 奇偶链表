328. 奇偶链表
难度：中等

给定一个单链表，把所有的奇数节点和偶数节点分别排在一起。请注意，这里的奇数节点和偶数节点指的是节点编号的奇偶性，而不是节点的值的奇偶性。
请尝试使用原地算法完成。你的算法的空间复杂度应为 O(1)，时间复杂度应为 O(nodes)，nodes 为节点总数。

示例 1:
输入: 1->2->3->4->5->NULL
输出: 1->3->5->2->4->NULL

解法：
方法一：链表拆分+合并
拆分：将奇数偶数结点拆分到两个链表
合并：将偶数结点链表添加到奇数链表末尾

code：
方法一：
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        if(head==NULL || head->next==NULL){
            return head;
        }
        ListNode *l=head, *r=head->next; // 分别代表奇数 偶数 两个链表
        ListNode *r_head = r;  // 偶数链表头指针
        while(r && r->next){ // 拆分
            l->next = r->next;
            l = l->next;
            r->next = l->next;
            r = r->next;
        }
        l->next = r_head; // 合并
        return head;
    }
};
