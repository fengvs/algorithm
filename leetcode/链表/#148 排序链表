#148. 排序链表
难度：中等

在 O(n log n) 时间复杂度和常数级空间复杂度下，对链表进行排序。

示例 1:
输入: 4->2->1->3
输出: 1->2->3->4

解法：
方法一：归并排序--递归
时间复杂度 O(n * log(n))
空间复杂度 O(n)

方法二：归并排序--自底向上


code：
方法一：
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* sortList(ListNode* head) {
        if(head==NULL || head->next==NULL){
            return head;
        }
        // 快慢指针 找出中间节点
        ListNode *slow=head, *fast=head->next;
        while(fast!=NULL && fast->next!=NULL){
            slow = slow->next;
            fast = fast->next->next;
        }
        // 划分链表，递归处理左右链表
        ListNode *tmp = slow->next;
        slow->next = NULL;
        ListNode *left = sortList(head);
        ListNode *right = sortList(tmp);
        ListNode *h = new ListNode(0);
        ListNode *res = h;
        // 合并链表
        while(left!=NULL && right!=NULL){
            if(left->val < right->val){
                h->next = left;
                left = left->next;
            }else{
                h->next = right;
                right = right->next;
            }
            h = h->next;
        }
        h->next = left==NULL ? right : left;
        return res->next;
    }
};

