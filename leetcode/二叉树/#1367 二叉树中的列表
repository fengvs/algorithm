1367. 二叉树中的列表
难度：中等

给你一棵以 root 为根的二叉树和一个 head 为第一个节点的链表。
如果在二叉树中，存在一条一直向下的路径，且每个点的数值恰好一一对应以 head 为首的链表中每个节点的值，那么请你返回 True ，否则返回 False 。
一直向下的路径的意思是：从树中某个节点开始，一直连续向下的路径。

示例 1：
输入：head = [4,2,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]
输出：true
解释：树中蓝色的节点构成了与链表对应的子路径。

解法：
方法一：DFS（递归 枚举）

方法二：DFS + KMP
字符串匹配问题，可用KMP



code：
方法一：
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSubPath(ListNode* head, TreeNode* root) {
        if(root == nullptr){
            return false;
        }
        return dfs(head, root) || isSubPath(head, root->left) || isSubPath(head, root->right);
    }
    bool dfs(ListNode* head, TreeNode* root){
        if(head == nullptr){
            return true;
        }
        if(root == nullptr || root->val != head->val){
            return false;
        }
        return dfs(head->next, root->left) || dfs(head->next, root->right);
    }
};
方法二：
class Solution {
public:
    unordered_map<ListNode*, ListNode*> next;
    unordered_map<ListNode*, ListNode*> prev;
    bool isSubPath(ListNode* head, TreeNode* root) {
        getNext(head);
        return find(head, root, head);
    }

    void getNext(ListNode* head) {
        if (!head) return;
        next[head] = head;
        for (auto curr = head->next, preNode = head; curr; curr = curr->next, preNode = preNode->next) {
            prev[curr] = preNode;
            auto node = next[preNode];
            while (node != head && node->val != curr->val) node = next[prev[node]];
            next[curr] = node->val == curr->val? node->next : head; 
        }
    }

    bool find(ListNode* head, TreeNode* root, ListNode* dummy) {
        if (!head) return true;
        if (!root) return false;
        auto curr = head;
        while (curr != dummy && curr->val != root->val) curr = next[prev[curr]];
        if (curr->val == root->val) curr = curr->next;
        return find(curr, root->left, dummy) || find(curr, root->right, dummy);
    }
};
