#701. 二叉搜索树中的插入操作
难度：中等

给定二叉搜索树（BST）的根节点和要插入树中的值，将值插入二叉搜索树。 返回插入后二叉搜索树的根节点。 输入数据保证，新值和原始二叉搜索树中的任意节点值都不同。
注意，可能存在多种有效的插入方式，只要树在插入后仍保持为二叉搜索树即可。 你可以返回任意有效的结果。
例如, 
给定二叉搜索树:
        4
       / \
      2   7
     / \
    1   3
和 插入的值: 5
你可以返回这个二叉搜索树:
         4
       /   \
      2     7
     / \   /
    1   3 5
或者这个树也是有效的:
         5
       /   \
      2     7
     / \   
    1   3
         \
          4

解法：
方法一：递归

方法二：迭代

code：
方法一：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* insertIntoBST(TreeNode* root, int val) {
        if(root == NULL){
            return new TreeNode(val);
        }
        if(val > root->val){
            root->right = insertIntoBST(root->right, val);
        }else{
            root->left = insertIntoBST(root->left, val);
        }
        return root;
    }
};
方法二：
class Solution {
public:
    TreeNode* insertIntoBST(TreeNode* root, int val) {
        if(root == NULL){
            return new TreeNode(val);
        }
        TreeNode* cur = root;
        while(cur != NULL){
            if(cur->val < val){
                if(cur->right == NULL){
                    cur->right = new TreeNode(val);
                    break;
                }else{
                    cur = cur->right;
                }
            }else{
                if(cur->left == NULL){
                    cur->left = new TreeNode(val);
                    break;
                }else{
                    cur = cur->left;
                }
            }
        }
        return root;
    }
};
