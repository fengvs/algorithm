#106. 从中序与后序遍历序列构造二叉树
难度：中等

根据一棵树的中序遍历与后序遍历构造二叉树。
注意:
你可以假设树中没有重复的元素。
例如，给出
中序遍历 inorder = [9,3,15,20,7]
后序遍历 postorder = [9,15,7,20,3]
返回如下的二叉树：
    3
   / \
  9  20
    /  \
   15   7

解法：
方法一：二叉树遍历性质
后序遍历最后一个节点是根节点，根据根节点和中序遍历，划分左子树、右子树，重复
时间复杂度 O(n*log(n))
空间复杂度 O(n), (递归栈)
优化：使用哈希存 值-中序数组中下标，优化 划分左右子树的时间
时间复杂度 O(n)
空间复杂度 O(n)

code：
方法一：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        return build(inorder, postorder, 0, inorder.size()-1, 0, postorder.size()-1);
    }
    TreeNode* build(vector<int>& inorder, vector<int>& postorder, int l1, int r1, int l2, int r2){
        if(l1 > r1){
            return NULL;
        }
        TreeNode* root = new TreeNode(postorder[r2]);
        int p;
        for(p=l1; p<=r1; p++){  // 可以使用哈希优化，用空间换时间
            if(inorder[p] == postorder[r2]){
                break;
            }
        }
        root->left = build(inorder, postorder, l1, p-1, l2, l2+p-l1-1);
        root->right = build(inorder, postorder, p+1, r1, r2-1-(r1-p-1) , r2-1);
        return root;
    }
};
