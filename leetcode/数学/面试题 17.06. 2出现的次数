面试题 17.06. 2出现的次数
难度：中等

编写一个方法，计算从 0 到 n (含 n) 中数字 2 出现的次数。
示例:
输入: 25
输出: 9
解释: (2, 12, 20, 21, 22, 23, 24, 25)(注意 22 应该算作两次)
提示：
n <= 10^9

解法：
方法一：数学--规律推导
核心-分别统计每位出现待查数(2)的次数，然后求和
整理成代码逻辑就是：
sum=0
依次遍历字符串（正好从高位到低位遍历一遍）：
    case(当前位大于带查找数)：
        sum +=（当前位的左边部分+1）* 10**当前位的右半部分的长度
    case(当前位小于带查找数):
        sum +=（当前位的左边部分）* 10**当前位的右半部分的长度
    case(当前位等于带查找数)：
        sum +=（当前位的左边部分）* 10**当前位的右半部分的长度 + 当前位的右半部分+1 


方法二：动态规划
主要思路是数位dp：
以dp[i]表示n的1~i位组成的数字所包含2的个数，关键点在于推导出dp[i]与dp[i-1]的关系

code：
方法一：
class Solution {
public:
    int numberOf2sInRange(int n) {
        int x = 2;
        string s = to_string(n);
        int ans = 0;
        int len = s.size();
        for(int i=0; i<len; i++){
            int left = atoi(s.substr(0, i).c_str());
            int right = atoi(s.substr(i+1, len-i-1).c_str());
            int cur = (int)(s[i]-'0');
            if(cur > x){
                ans += (left+1) * pow(10, len-1-i);
            }else if(cur < x){
                ans += (left) * pow(10, len-1-i);
            }else{
                ans += left * pow(10, len-1-i) + right + 1;
            }
        }
        return ans;
    }
};
方法二：
class Solution {
    public int numberOf2sInRange(int n) {
        if(n == 0) {
            return 0;
        }
        int digit = (int)Math.log10(n) + 1;
        int[][] dp = new int[digit+1][2];  
        // dp[i][0] = numberOf2sInRange(n % pow(10, i)) 保存0~n的1-i位组成的数包含2的个数
        // dp[i][1] = numberOf2sInRange(99..9) 保存i位均为9包含2的个数
        dp[1][0] = n % 10 >= 2 ? 1:0;
        dp[1][1] = 1;
        for(int i = 2; i <= digit; i++) {
            int k = n/ ((int)Math.pow(10, i-1)) % 10;
            dp[i][0] = k * dp[i-1][1] + dp[i-1][0];
            if(k == 2) {
                dp[i][0] += n % (int)Math.pow(10, i-1) +1; 
            } else if(k > 2){
                dp[i][0] +=  (int)Math.pow(10, i-1);
            }
            dp[i][1] = 10 * dp[i-1][1] + (int)Math.pow(10, i-1); //计算1-i位均为9的值包含2的个数
        }
        return dp[digit][0];
    }
}

