剑指 Offer 14- I. 剪绳子
难度：中等

给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n>1并且m>1），每段绳子的长度记为 k[0],k[1]...k[m-1] 。
请问 k[0]*k[1]*...*k[m-1] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。

示例 2:
输入: 10
输出: 36
解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36

2 <= n <= 58
剪绳子 II：2 <= n <= 1000

解法：
方法一：动态规划
dp[i] = max((i-j)*j, (i-j)*dp[j]) , 1 <= j < i
注：只适合n比较小，不能解决 剪绳子 II

方法二：数学推导/贪心思想 + 快速幂求余
推论一： 将绳子 以相等的长度等分为多段 ，得到的乘积最大
推论二： 尽可能将绳子以长度 33 等分为多段时，乘积最大
切分规则：
最优： 3 。把绳子尽可能切为多个长度为 33 的片段，留下的最后一段绳子的长度可能为 0,1,2 三种情况。
次优： 2 。若最后一段绳子长度为 2 ；则保留，不再拆为 1+1。
最差： 1 。若最后一段绳子长度为 1 ；则应把一份 3 + 1 替换为 2 + 2，因为2×2>3×1。



code：
方法一：
class Solution {
public:
    // dp[i] = max((i-j)*dp[j]), 1<=j<i
    int cuttingRope(int n) {
        int dp[n+3];
        memset(dp, 0, sizeof(dp));
        for(int i=2; i<=n; i++){
            for(int j=1; j<i; j++){
                dp[i] = max(dp[i], max((i-j)*j, (i-j)*dp[j]));
            }
        }
        return dp[n];
    }
};

方法二：
class Solution {
public:
    // 贪心：划分成3*3*3*... 若余1，则化为3+1=4，若余2，则*2
    int cuttingRope(int n) {
        if(n <= 3){
            return n-1;
        }
        long a=n/3-1, b=n%3, p=1e9+7;
        long x=3, ans=1;
        while(a){  // 快速幂求余
            if(a&1){
                ans = ans * x % p;
            }
            x = x * x % p;
            a >>= 1;
        }
        if(b == 0){
            return (int)(ans * 3 % p);
        }else if(b == 1){
            return (int)(ans * 4 % p);
        }else{
            return (int)(ans * 6 % p);
        }
    }
};
