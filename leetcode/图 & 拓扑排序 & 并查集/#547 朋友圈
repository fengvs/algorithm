#547. 朋友圈
难度：中等

班上有 N 名学生。其中有些人是朋友，有些则不是。他们的友谊具有是传递性。如果已知 A 是 B 的朋友，B 是 C 的朋友，那么我们可以认为 A 也是 C 的朋友。所谓的朋友圈，是指所有朋友的集合。
给定一个 N * N 的矩阵 M，表示班级中学生之间的朋友关系。如果M[i][j] = 1，表示已知第 i 个和 j 个学生互为朋友关系，否则为不知道。你必须输出所有学生中的已知的朋友圈总数。

示例 1：
输入：
[[1,1,0],
 [1,1,0],
 [0,0,1]]
输出：2 
解释：已知学生 0 和学生 1 互为朋友，他们在一个朋友圈。
第2个学生自己在一个朋友圈。所以返回 2 。


解法：
方法一：并查集
n个朋友圈，每合并一次，减一
时间复杂度 O(n ^ 3)
空间复杂度 O(n)

方法二：DFS
时间复杂度 O(n ^ 2)
空间复杂度 O(n)

方法三：BFS
时间复杂度 O(n ^ 2)
空间复杂度 O(n)

code：
方法一：
class Solution {
public:
    vector<int> fa;
    
    int findCircleNum(vector<vector<int>>& M) {
        int n = M.size();
        init(n);
        int res = n;
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                if(M[i][j] == 1 && find(i) != find(j)){
                    res--;
                    merge(i, j);
                }
            }
        }
        return res;
    }
    void init(int n){
        for(int i=0; i<n; i++){
            fa.push_back(i);
        }
    }
    /*
    int find(int x){
        return x == fa[x] ? x : find(fa[x]);
    }
    */
    // 路径压缩
    int find(int x){
        return x == fa[x] ? x : fa[x]=find(fa[x]);
    }
    void merge(int x, int y){
        int fa_x = find(x);
        fa[find(y)] = fa_x;
    }
};
方法二：

public class Solution {
    public void dfs(int[][] M, int[] visited, int i) {
        for (int j = 0; j < M.length; j++) {
            if (M[i][j] == 1 && visited[j] == 0) {
                visited[j] = 1;
                dfs(M, visited, j);
            }
        }
    }
    public int findCircleNum(int[][] M) {
        int[] visited = new int[M.length];
        int count = 0;
        for (int i = 0; i < M.length; i++) {
            if (visited[i] == 0) {
                dfs(M, visited, i);
                count++;
            }
        }
        return count;
    }
}
方法三：
public class Solution {
    public int findCircleNum(int[][] M) {
        int[] visited = new int[M.length];
        int count = 0;
        Queue < Integer > queue = new LinkedList < > ();
        for (int i = 0; i < M.length; i++) {
            if (visited[i] == 0) {
                queue.add(i);
                while (!queue.isEmpty()) {
                    int s = queue.remove();
                    visited[s] = 1;
                    for (int j = 0; j < M.length; j++) {
                        if (M[s][j] == 1 && visited[j] == 0)
                            queue.add(j);
                    }
                }
                count++;
            }
        }
        return count;
    }
}
