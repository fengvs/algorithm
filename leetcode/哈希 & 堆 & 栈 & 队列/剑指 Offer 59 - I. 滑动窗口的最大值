剑指 Offer 59 - I. 滑动窗口的最大值

给定一个数组 nums 和滑动窗口的大小 k，请找出所有滑动窗口里的最大值。

示例:
输入: nums = [1,3,-1,-3,5,3,6,7], 和 k = 3
输出: [3,3,5,5,6,7] 
解释: 
  滑动窗口的位置                最大值
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7


解法：
方法一：单调队列
维护一个双端队列deque：保存下标，数值递减
1.添加一个元素nums[j+1]，将deque中比nums[j+1]小的都删除
2.若滑动窗口已滑出deque头部元素，则删除队首
3.则每次滑动窗口中最大值即是当前deque队首对应的元素
时间复杂度 O(n)
空间复杂度 O(k)


code:
方法一：
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        vector<int> res;
        if(nums.size() < k || k <= 0){
            return res;
        }
        deque<int> dq; // 存下标
        for(int i=0; i<nums.size(); i++){
            if(i >= k){
                res.push_back(nums[dq.front()]); // 队首元素即是当前滑动窗口最大值
            }
            while(!dq.empty() && nums[i] >= nums[dq.back()]){ // 添加元素
                dq.pop_back();
            }
            dq.push_back(i);
            if(!dq.empty() && dq.front() <= (int)(i-k)){ // 删除超出滑动窗口的元素
                dq.pop_front();
            }
        }
        res.push_back(nums[dq.front()]);
        return res;
    }
};
