1365. 有多少小于当前数字的数字
难度：简单

给你一个数组 nums，对于其中每个元素 nums[i]，请你统计数组中比它小的所有数字的数目。
换而言之，对于每个 nums[i] 你必须计算出有效的 j 的数量，其中 j 满足 j != i 且 nums[j] < nums[i] 。
以数组形式返回答案。

示例 1：
输入：nums = [8,1,2,2,3]
输出：[4,0,1,1,3]
解释： 
对于 nums[0]=8 存在四个比它小的数字：（1，2，2 和 3）。 
对于 nums[1]=1 不存在比它小的数字。
对于 nums[2]=2 存在一个比它小的数字：（1）。 
对于 nums[3]=2 存在一个比它小的数字：（1）。 
对于 nums[4]=3 存在三个比它小的数字：（1，2 和 2）。
提示：
2 <= nums.length <= 500
0 <= nums[i] <= 100

解法：
方法一：暴力
时间复杂度 O(n^2)
空间复杂度 O(1)

方法二：快速排序
对<value, index>进行排序，再统计
时间复杂度 O(n * log(n))
空间复杂度 O(n)

方法三：计数排序
因为数组的数值范围小，所以可以用计数排序
时间复杂度 O(n + K)，K是值域大小
空间复杂度 O(K)


code：
方法二：
class Solution {
public:
    vector<int> smallerNumbersThanCurrent(vector<int>& nums) {
        vector<pair<int, int>> data;
        int n = nums.size();
        for (int i = 0; i < n; i++) {
            data.emplace_back(nums[i], i);
        }
        sort(data.begin(), data.end());

        vector<int> ret(n, 0);
        int prev = -1;
        for (int i = 0; i < n; i++) {
            if (prev == -1 || data[i].first != data[i - 1].first) {
                prev = i;
            }
            ret[data[i].second] = prev;
        }
        return ret;
    }
};

方法三：
class Solution {
public:
    vector<int> smallerNumbersThanCurrent(vector<int>& nums) {
        int cnt[105];
        memset(cnt, 0, sizeof(cnt));
        for(int i=0; i<nums.size(); i++){
            cnt[nums[i]]++;
        }
        int sum[105];
        memset(sum, 0, sizeof(sum));
        for(int i=1; i<=100; i++){
            sum[i] = sum[i-1]+cnt[i-1];
        }
        vector<int> ans;
        for(int i=0; i<nums.size(); i++){
            ans.push_back(sum[nums[i]]);
        }
        return ans;
    }
};

// 空间优化
class Solution {
public:
    vector<int> smallerNumbersThanCurrent(vector<int>& nums) {
        vector<int> cnt(101, 0);
        int n = nums.size();
        for (int i = 0; i < n; i++) {
            cnt[nums[i]]++;
        }
        for (int i = 1; i <= 100; i++) {
            cnt[i] += cnt[i - 1];
        }
        vector<int> ret;
        for (int i = 0; i < n; i++) {
            ret.push_back(nums[i] == 0 ? 0: cnt[nums[i]-1]);
        }
        return ret;
    }
};
