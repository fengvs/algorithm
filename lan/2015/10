 生命之树
在X森林里，上帝创建了生命之树。
他给每棵树的每个节点（叶子也称为一个节点）上，都标了一个整数，代表这个点的和谐值。
上帝要在这棵树内选出一个非空节点集S，使得对于S中的任意两个点a,b，都存在一个点列 {a, v1, v2, ..., vk, b} 使得这个点列中的每个点都是S里面的元素，且序列中相邻两个点间有一条边相连。
在这个前提下，上帝要使得S中的点所对应的整数的和尽量大。
这个最大的和就是上帝给生命之树的评分。
经过atm的努力，他已经知道了上帝给每棵树上每个节点上的整数。但是由于 atm 不擅长计算，他不知道怎样有效的求评分。他需要你为他写一个程序来计算一棵树的分数。

「输入格式」
第一行一个整数 n 表示这棵树有 n 个节点。
第二行 n 个整数，依次表示每个节点的评分。
接下来 n-1 行，每行 2 个整数 u, v，表示存在一条 u 到 v 的边。由于这是一棵树，所以是不存在环的。

「输出格式」
输出一行一个数，表示上帝给这棵树的分数。

「样例输入」
5
1 -2 -3 4 5
4 2
3 1
1 2
2 5

「样例输出」
8

「数据范围」
对于 30% 的数据，n <= 10
对于 100% 的数据，0 < n <= 10^5, 每个节点的评分的绝对值不超过 10^6 。

资源约定：
峰值内存消耗 < 256M
CPU消耗  < 3000ms




/* 树形dp
dp[u] = sum(max(dp[v],0)) + w[u]  //v是u的子节点  
如果子树大于0，则有价值，否则舍掉 
*/
#include<cstdio>
#include<iostream>
#include<vector>
#include<cmath>
#include<cstring>
#define ll long long
using namespace std;
const int N = 1e5+5;

int n, w[N];
vector<int> v[N];
bool vis[N];
ll dp[N];
void dfs(int u)
{
	dp[u] = w[u];
	vis[u] = true;
	int len = v[u].size();
	for(int i=0; i<len; i++){
		int to = v[u][i];
		if(!vis[to]){
			dfs(to);
			dp[u] += max((ll)0,dp[to]); // 如果子树 >0 ，则取 
		}
	}
}
int main()
{
	scanf("%d", &n);
	for(int i=1; i<=n; i++){
		scanf("%d", w+i);
	}
	for(int i=1; i<n; i++){
		int x,y;
		scanf("%d%d", &x,&y);
		v[x].push_back(y);
		v[y].push_back(x);
	}
	memset(vis,0,sizeof(vis));
	
	dfs(1);
	ll ans = -1e7;
	for(int i=1; i<=n; i++){
		ans = max(ans,dp[i]);
	}
	printf("%lld\n", ans);
}
