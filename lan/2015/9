垒骰子
赌圣atm晚年迷恋上了垒骰子，就是把骰子一个垒在另一个上边，不能歪歪扭扭，要垒成方柱体。
经过长期观察，atm 发现了稳定骰子的奥秘：有些数字的面贴着会互相排斥！
我们先来规范一下骰子：1 的对面是 4，2 的对面是 5，3 的对面是 6。
假设有 m 组互斥现象，每组中的那两个数字的面紧贴在一起，骰子就不能稳定的垒起来。 
atm想计算一下有多少种不同的可能的垒骰子方式。
两种垒骰子方式相同，当且仅当这两种方式中对应高度的骰子的对应数字的朝向都相同。
由于方案数可能过多，请输出模 10^9 + 7 的结果。
不要小看了 atm 的骰子数量哦～

「输入格式」
第一行两个整数 n m
n表示骰子数目
接下来 m 行，每行两个整数 a b ，表示 a 和 b 数字不能紧贴在一起。

「输出格式」
一行一个数，表示答案模 10^9 + 7 的结果。

「样例输入」
2 1
1 2

「样例输出」
544

「数据范围」
对于 30% 的数据：n <= 5
对于 60% 的数据：n <= 100
对于 100% 的数据：0 < n <= 10^9, m <= 36

资源约定：
峰值内存消耗 < 256M
CPU消耗  < 2000ms



复杂度：36*n
#include<cstdio>
#include<algorithm>
#define ll long long
using namespace std;
const int N = 6;
const int mod = 1e9+7;

int ist[N][N];
ll dp[2][N];
int main()
{
	int n, m;
	scanf("%d%d", &n,&m);
	//初始化 
	for(int i=0; i<6; i++){
		for(int j=0; j<6; j++){
			ist[i][j] = 1;
		}
		dp[1][i] = 1;
		dp[0][i] = 0;
	}
	for(int i=0; i<m; i++){
		int x,y;
		scanf("%d%d", &x,&y);
		ist[x-1][y-1] = ist[y-1][x-1] = 0;
	}
	//dp : 滚动数组优化 
	int c = 4; // 每层骰子有四个转向 
	for(int k=2; k<=n; k++){
		c = c*4%mod; 
		for(int i=0; i<6; i++){
			dp[k%2][i] = 0;
			for(int j=0; j<6; j++){
				if(ist[i][j]){
					dp[k%2][i] += dp[1-k%2][j];
				}
			}
			dp[k%2][i] %= mod;
		}
	}
	ll ans = 0;
	for(int i=0; i<6; i++){
		ans = (ans+dp[n%2][i])%mod;
	}
	printf("%d\n", ans*c%mod);
} 

//矩阵快速幂优化
//时间复杂度 log(n)*6^3
#include<cstdio>
#include<cstring>
using namespace std;
const int N = 6;
const int mod = 1e9+7;

typedef long long mat[N][N];
mat U, V;
void mul(mat a,mat b,mat c)
{
	mat t = {{0}};
	for(int i=0; i<N; i++){
		for(int j=0; j<N; j++){
			for(int k=0; k<N; k++){
				t[i][j] += a[i][k]*b[k][j];
				t[i][j] %= mod;
			}
		}
	}
	memcpy(c,t,sizeof(t));
}
int main()
{
	int n, m;
	scanf("%d%d", &n,&m);
	for(int i=0; i<N; i++)
		for(int j=0; j<N; j++)
			U[i][j] = 4;
	for(int i=0; i<m; i++){
		int x,y;
		scanf("%d%d", &x,&y);
		x--, y--;
		U[x][y<3 ? y+3:y-3] = 0;
		U[y][x<3 ? x+3:x-3] = 0;
	}
	for(int i=0; i<N; i++){
		V[i][i] = 4;
	}
	n--;
	while(n){
		if(n&1){
			mul(U,V,V);
		}
		mul(U,U,U);
		n >>= 1;
	}
	long long ans = 0;
	for(int i=0; i<N; i++){
		for(int j=0; j<N; j++){
			ans = (ans+V[i][j])%mod;
		}
	}
	printf("%lld\n",ans);
}
