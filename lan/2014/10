
标题：小朋友排队

    n 个小朋友站成一排。现在要把他们按身高从低到高的顺序排列，但是每次只能交换位置相邻的两个小朋友。

    每个小朋友都有一个不高兴的程度。开始的时候，所有小朋友的不高兴程度都是0。

    如果某个小朋友第一次被要求交换，则他的不高兴程度增加1，如果第二次要求他交换，则他的不高兴程度增加2（即不高兴程度为3），依次类推。当要求某个小朋友第k次交换时，他的不高兴程度增加k。

    请问，要让所有小朋友按从低到高排队，他们的不高兴程度之和最小是多少。

    如果有两个小朋友身高一样，则他们谁站在谁前面是没有关系的。

【数据格式】

    输入的第一行包含一个整数n，表示小朋友的个数。
    第二行包含 n 个整数 H1 H2 … Hn，分别表示每个小朋友的身高。
    输出一行，包含一个整数，表示小朋友的不高兴程度和的最小值。

例如，输入：
3
3 2 1
程序应该输出：
9

【样例说明】
   首先交换身高为3和2的小朋友，再交换身高为3和1的小朋友，再交换身高为2和1的小朋友，每个小朋友的不高兴程度都是3，总和为9。


【数据规模与约定】
    对于10%的数据， 1<=n<=10；
    对于30%的数据， 1<=n<=1000；
    对于50%的数据， 1<=n<=10000；
    对于100%的数据，1<=n<=100000，0<=Hi<=1000000。


资源约定：
峰值内存消耗 < 256M
CPU消耗  < 1000ms


请严格按要求输出，不要画蛇添足地打印类似：“请您输入...” 的多余内容。

所有代码放在同一个源文件中，调试通过后，拷贝提交该源码。

注意: main函数需要返回0
注意: 只使用ANSI C/ANSI C++ 标准，不要调用依赖于编译环境或操作系统的特殊函数。
注意: 所有依赖的函数必须明确地在源文件中 #include <xxx>， 不能通过工程设置而省略常用头文件。

提交时，注意选择所期望的编译器类型。



#include<cstdio>
#include<algorithm>
#include<cstring>
#define ll long long
using namespace std;
#define lson l,m,rt<<1
#define rson m+1,r,rt<<1|1
const int N = 1e5+5;

struct node
{
	int h, no;
	bool operator < (const node b) const{
		if(this->h != b.h){
			return this->h < b.h;
		}
		return this->no < b.no;
	}
}a[N];
int n, sum[N<<2];
void pushUp(int rt)
{
	sum[rt] = sum[rt<<1]+sum[rt<<1|1];
}
void update(int p,int add,int l,int r,int rt)
{
	if(l == r){
		sum[rt] += add;
		return ;
	}
	int m = (l+r)>>1;
	if(p <= m){
		update(p,add,lson);
	}else{
		update(p,add,rson);
	}
	pushUp(rt);
}
int query(int L,int R,int l,int r,int rt)
{
	if(L<=l && R>=r){
		return sum[rt];
	}
	int ret = 0;
	int m = (l+r)>>1;
	if(L <= m){
		ret += query(L,R,lson);
	}
	if(R > m){
		ret += query(L,R,rson);
	}
	return ret;
}
int main()
{
	scanf("%d", &n);
	for(int i=1; i<=n; i++){
		scanf("%d", &a[i].h);
		a[i].no = i;
	}
	sort(a+1,a+n+1);
	memset(sum,0,sizeof(sum));
	ll ans = 0;
	for(int i=1; i<=n; i++){
		int l = query(1,a[i].no,1,n,1);
		l = a[i].no-1-l;
		int r = query(a[i].no,n,1,n,1);
		ans += (l+r+1)*1LL*(l+r)/2;
		update(a[i].no,1,1,n,1);
		//printf("%d %d\n",l,r);
	}
	printf("%lld\n", ans);
}
